I"„<p>In the last post weâ€™ve looked at how we can store our geometry, how we can traverse the resulting mesh and how weâ€™ll later store our actual data. But one aspect we havenâ€™t looked at yet is how we construct such a mesh data structure in the first place, i.e. how we get from a soup of triangle faces to a quad-edge mesh.</p>

<p>There are two basic operations defined in the original paper to construct and modify meshes:</p>
<ul>
  <li>MakeEdge: Creates a new edge <code>e</code> and its corresponding quad-edge</li>
  <li>Splice: Takes two edges <code>a</code> and <code>b</code> and either connects them or splits them apart, if they are already connected.</li>
</ul>

<p>While these two operations are quite powerful and can be used to construct any quad-edge mesh and apply any modification we might want, they are not ideal for our use-case. First they are rather more complex to use, than I would like for everyday use, because they require quite a bit of knowledge about topology and use concepts that are not as easy to visualize as faces in a triangle mesh. And secondly, they allow for structures that we donâ€™t actually want to support, like non-triangular faces.</p>

<p>So what we will do instead is to define our own operations, based on how they will be used later. In this post we will first look at just the construction of a new mesh, for which weâ€™ll just define two functions:</p>
:ET