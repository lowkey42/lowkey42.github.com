I"∑<h1 id="requirement">Requirement</h1>

<!--more-->

<h1 id="packaging">Packaging</h1>

<ul>
  <li>Core library (C-API, C++ implementation) + C++ API (Header-Only wrapper for core library)</li>
  <li>Modules (dynamic libraries/plugins)</li>
  <li>Tools (editor/demo applications)</li>
</ul>

<p>All as separate git projects; using CMake FetchContent to load dependencies (modules=&gt;core; tools=&gt;modules+core)</p>

<p>For programming: main directory, containing each git project + simple cmake-file that includes all sub-projects</p>

<h1 id="hourglass-pattern">Hourglass-Pattern</h1>
<p>C-API with C++-IMPL + C++ Header-only wrapper
Types: not opaque handles but contain all required attributes and are sub-classed in impl
	=&gt; allows for better cache-locality / less pointer chasing (e.g. for string)
	=&gt; ‚Äúallows‚Äù pointers to C-API structs to be cast to pointers to C++-Wrappers (pointer to first member; grey-area; static_asserts)</p>

:ET