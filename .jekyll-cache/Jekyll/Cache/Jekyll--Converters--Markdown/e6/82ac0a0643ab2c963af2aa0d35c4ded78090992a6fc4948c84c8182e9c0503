I"^H<p>I’m currently looking into possible topics for my master thesis. But against all odds I’ve grown a bit tired of writing game engines and renderers, lately. So, seeing as I’ve also developed an interest in procedural generation and always had a bit of a fascination for fantasy worlds and maps, I’ve decided to work on procedural world generation. This is obviously going to be a <a href="https://dwarffortresswiki.org/index.php?title=DF2014:Fun&amp;redirect=no">fun</a> project with much potential for interesting failures. But as Gordon Moore put it: If everything you try works, you aren’t trying hard enough. Therefore, I’m planing to force my self to document my plans, progress and interesting problems here (even if primarily for myself).</p>

<p>So without further ado: Welcome to this unwise mix of <a href="https://heredragonsabound.blogspot.com/2020/02/the-forever-project.html">forever project</a> and master thesis.</p>

<h1 id="related-work">Related Work</h1>

<p>There already are quite a lot of inspiring projects that procedurally generate worlds and maps with quite impressive results. And also some scientific papers that I might use as a basis for my project. Although, most of these are sadly closed source projects.</p>

<div class="image_list">

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/dwarf-fortress.png" alt="Dwarf Fortress is arguably the first thing that comes to mind, when people think about procedural generation of game worlds. Sadly concrete information about the generation algorithms is a bit sparse. But the generation starts with layers of noise based fractal maps for terrain/precipitation/..., that form the initial map and are then refined by simulation steps. The main focus and most impressive part is of course the history generation and simulation of the actual game world. In contrast, the terrain generation is sadly relatively unimpressive." />
  <figcaption>Dwarf Fortress is arguably the first thing that comes to mind, when people think about procedural generation of game worlds. Sadly concrete information about the generation algorithms is a bit sparse. But the generation starts with layers of noise based fractal maps for terrain/precipitation/..., that form the initial map and are then refined by simulation steps. The main focus and most impressive part is of course the history generation and simulation of the actual game world. In contrast, the terrain generation is sadly relatively unimpressive.</figcaption>
</figure>

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/red_blob_mapgen4.png" alt="&lt;a href='https://www.redblobgames.com/maps/mapgen4/'&gt;Amit Patel's Mapgen 4&lt;/a&gt; (as well as its &lt;a href='https://www.redblobgames.com/maps/mapgen2/'&gt;previous iterations&lt;/a&gt;) is also quite interesting. Especially because it's quite &lt;a href='http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/'&gt;thoroughly&lt;/a&gt; &lt;a href='https://simblob.blogspot.com/search/label/mapgen4'&gt;documented&lt;/a&gt; on his blog. It uses a relaxed voronoi diagram and its dual (delaunay triangulation) as its fundamental data-structure to generate interesting maps without the obvious artifacts often seen with uniform grids. Mapgen4 allows for quite intuitive editing of the elevation and generation parameters, with procedural generation of rivers, precipitation and biomes. But the most interesting part for me personally is the rendering which utilizes a traditional rendering pipeline with an oblique projection and more artistic lighting to achieve a look that is quite close to a hand-drawn look." />
  <figcaption><a href="https://www.redblobgames.com/maps/mapgen4/">Amit Patel's Mapgen 4</a> (as well as its <a href="https://www.redblobgames.com/maps/mapgen2/">previous iterations</a>) is also quite interesting. Especially because it's quite <a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/">thoroughly</a> <a href="https://simblob.blogspot.com/search/label/mapgen4">documented</a> on his blog. It uses a relaxed voronoi diagram and its dual (delaunay triangulation) as its fundamental data-structure to generate interesting maps without the obvious artifacts often seen with uniform grids. Mapgen4 allows for quite intuitive editing of the elevation and generation parameters, with procedural generation of rivers, precipitation and biomes. But the most interesting part for me personally is the rendering which utilizes a traditional rendering pipeline with an oblique projection and more artistic lighting to achieve a look that is quite close to a hand-drawn look.</figcaption>
</figure>

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/dragons_abound.png" alt="&lt;a href='https://heredragonsabound.blogspot.com'&gt;Scott Turner's Dragons Abound&lt;/a&gt; procedurally generates and draws fantasy maps, with quite beautiful and adaptable results that are already often near-indistinguishable from hand drawn maps. Although the main focus seems to be on drawing the maps, which informed some of the design decisions, there are also some simulation-based approaches to determine climates, precipitation and rivers. There are some technical similarities to Amit Patel's approach, insofar as both use delaunay triangulations as their fundamental data-structure. But Dragons Abound seems to use a much larger amount of vertices, which support smaller features and produces more natural shapes." />
  <figcaption><a href="https://heredragonsabound.blogspot.com">Scott Turner's Dragons Abound</a> procedurally generates and draws fantasy maps, with quite beautiful and adaptable results that are already often near-indistinguishable from hand drawn maps. Although the main focus seems to be on drawing the maps, which informed some of the design decisions, there are also some simulation-based approaches to determine climates, precipitation and rivers. There are some technical similarities to Amit Patel's approach, insofar as both use delaunay triangulations as their fundamental data-structure. But Dragons Abound seems to use a much larger amount of vertices, which support smaller features and produces more natural shapes.</figcaption>
</figure>

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/azgaar.png" alt="&lt;a href='https://azgaar.github.io/Fantasy-Map-Generator/'&gt;Azgaar's Fantasy Map Generator&lt;/a&gt; is another fascinating project, that not only provides a working web application to interactively generate detailed fantasy maps but is also &lt;a href='https://github.com/Azgaar/Fantasy-Map-Generator'&gt;open source&lt;/a&gt;. And there is even a (currently sadly inactive) &lt;a href='https://azgaar.wordpress.com'&gt;blog&lt;/a&gt; with interesting details about its design and inner workings. As in the previous two, this generator uses a voronoi graph, but the focus seems to lie much more on the generation. But the most impressive part of this project is probably the insane amount of possible customization and editing of the generated maps." />
  <figcaption><a href="https://azgaar.github.io/Fantasy-Map-Generator/">Azgaar's Fantasy Map Generator</a> is another fascinating project, that not only provides a working web application to interactively generate detailed fantasy maps but is also <a href="https://github.com/Azgaar/Fantasy-Map-Generator">open source</a>. And there is even a (currently sadly inactive) <a href="https://azgaar.wordpress.com">blog</a> with interesting details about its design and inner workings. As in the previous two, this generator uses a voronoi graph, but the focus seems to lie much more on the generation. But the most impressive part of this project is probably the insane amount of possible customization and editing of the generated maps.</figcaption>
</figure>

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/undiscoveredworlds.png" alt="&lt;a href='https://undiscoveredworlds.blogspot.com'&gt;JonathanCR's Undiscovered Worlds&lt;/a&gt; as a procedural world generation project, inspired by Dragons Abound. But the aim of this project is more to generate complete worlds instead of drawing maps with relatively small/local scale, which is especially interesting as its close to my current plans." />
  <figcaption><a href="https://undiscoveredworlds.blogspot.com">JonathanCR's Undiscovered Worlds</a> as a procedural world generation project, inspired by Dragons Abound. But the aim of this project is more to generate complete worlds instead of drawing maps with relatively small/local scale, which is especially interesting as its close to my current plans.</figcaption>
</figure>

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/Procedural Tectonic Planets.gif" alt="&lt;a href='https://hal.archives-ouvertes.fr/hal-02136820/file/2019-Procedural-Tectonic-Planets.pdf'&gt;Procedural Tectonic Planets by Cortial et al.&lt;/a&gt; is a paper from 2019 that proposes a model to procedurally generate planets using a simplified simulation of plate tectonics. Although the authors sadly didn't provide their source code or an executable to reproduce their results, the provided images and &lt;a href='https://www.youtube.com/watch?v=GJQVl6Xld0w'&gt;video&lt;/a&gt; look quite promising." />
  <figcaption><a href="https://hal.archives-ouvertes.fr/hal-02136820/file/2019-Procedural-Tectonic-Planets.pdf">Procedural Tectonic Planets by Cortial et al.</a> is a paper from 2019 that proposes a model to procedurally generate planets using a simplified simulation of plate tectonics. Although the authors sadly didn't provide their source code or an executable to reproduce their results, the provided images and <a href="https://www.youtube.com/watch?v=GJQVl6Xld0w">video</a> look quite promising.</figcaption>
</figure>

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/Large Scale Terrain Generation from Tectonic Uplift and Fluvial Erosion.png" alt="&lt;a href='https://hal.inria.fr/hal-01262376/document'&gt;Large Scale Terrain Generation from Tectonic Uplift and Fluvial Erosion by Cordonnier et al.&lt;/a&gt; is paper from 2017 that uses tectonic uplift and hydraulic erosion data to generate plausible terrains. Although the scale is more local than my current plans, this might be an interesting approach to simulate erosion and river formation at a relatively high level." />
  <figcaption><a href="https://hal.inria.fr/hal-01262376/document">Large Scale Terrain Generation from Tectonic Uplift and Fluvial Erosion by Cordonnier et al.</a> is paper from 2017 that uses tectonic uplift and hydraulic erosion data to generate plausible terrains. Although the scale is more local than my current plans, this might be an interesting approach to simulate erosion and river formation at a relatively high level.</figcaption>
</figure>

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/wonderdraft.jpg" alt="&lt;a href='https://www.wonderdraft.net'&gt;Wonderdraft&lt;/a&gt; is a quite powerful and easy to used editor to manually create fantasy maps. It doesn't really provide much in terms of procedural generation but might be an interesting reference as far as user editing of the generated data is concerned. There might also be an interesting potential in integrating a more powerful procedural generation toolkit with it, but in the absence of any API or documented file format that seems to be unrealistic for now." />
  <figcaption><a href="https://www.wonderdraft.net">Wonderdraft</a> is a quite powerful and easy to used editor to manually create fantasy maps. It doesn't really provide much in terms of procedural generation but might be an interesting reference as far as user editing of the generated data is concerned. There might also be an interesting potential in integrating a more powerful procedural generation toolkit with it, but in the absence of any API or documented file format that seems to be unrealistic for now.</figcaption>
</figure>

  <figure class="captioned_image crop">
  <img style="float:none; max-height:20em" src="/assets/images/voxel_farm.gif" alt="&lt;a href='https://www.voxelfarm.com/index.html'&gt;Miguel Cepero's Voxel Farm&lt;/a&gt; is another interesting project and his &lt;a href='http://procworld.blogspot.com'&gt;blog&lt;/a&gt; is one of the reasons I originally became interested in 3D graphics and procedural generation. In contrast to most projects in this list it generates not just a map of a world but an actual interactive 3D world. This is obviously far outside of any reasonable scope for me, but some of the more abstract ideas might still be interesting." />
  <figcaption><a href="https://www.voxelfarm.com/index.html">Miguel Cepero's Voxel Farm</a> is another interesting project and his <a href="http://procworld.blogspot.com">blog</a> is one of the reasons I originally became interested in 3D graphics and procedural generation. In contrast to most projects in this list it generates not just a map of a world but an actual interactive 3D world. This is obviously far outside of any reasonable scope for me, but some of the more abstract ideas might still be interesting.</figcaption>
</figure>

</div>

<h1 id="project-aims">Project Aims</h1>

<p>So what exactly is it I’m trying to achieve here? My main focus is going to be not too different from that of Undiscovered Worlds. I’m mostly interested in generating plausible worlds that can be explored, used and processed further by others. Of course, I’ll also have to visualize my results in the form of maps and provide some form of user input, but that probably won’t be anything to fancy. And beside that I have three main aims for this project to guide my design decisions.</p>

<h2 id="simulation-instead-of-noise">Simulation instead of Noise</h2>
<p>As I’m mostly interested in the world generation aspect I want to try to reduce the amount of random input and noise to a minimum and rely on simulations instead. A model based on a large amount of complexly layered noise might generate interesting worlds, but that is entirely thanks to how that noise is modulated instead of any real meaningful capabilities of the system. And as an effect of this, the generational space of such models is inherently limited to the small subset for which the parameters have been hand-tuned. As John von Neumann famously said:</p>
<blockquote>
  <p>With four parameters I can fit an elephant, and with five I can make him wiggle his trunk.</p>
</blockquote>

<p>But my goal is to create a more generalized system that can generate a wide variety of interesting worlds. What I mean with <em>interesting</em> in this case is, that there should be a <em>comprehensible</em> amount of <em>meaningful</em> information in the generated worlds. So every visible feature should have a <em>cause</em> that can be discovered by the user, e.g. matching coasts where continents split apart, canyons where rivers used to flow, settlements where they actually make sense with names based on their surroundings and history. Aside from the general technical difficulty, striking the right balance will also be a problem here. Because an unbroken chain of cause and effect is utterly meaningless if it’s too complex to be easily comprehensible and the generated world becomes no more interesting than one based purely on random noise.</p>

<h2 id="realistic-scale">Realistic scale</h2>

<p>My second large aim for this project is the scale at which I want to generate worlds. To support physically meaningful parameters and allow for an easier comparison with the real world I’m planing to generate spherical worlds on roughly the same scale as earth, i.e. a radius of about 6’000 km.</p>

<p>To support such a large scale with any amount of local details I’m going to use a triangle mesh to store my elevation and other information. This should allow for a wide variety of resolutions based on local requirements (i.a. fewer vertices in the ocean and more near coasts and mountains). And this should also solve most of the problems and artifacts, encountered when one tries to use uniform rectangular grids like bitmaps and a spherical surface.</p>

<p>I’m currently planing to develop my generator in a top-down fashion, starting with the largest terrain features like tectonic plates and mountains and moving on to smaller scale details like rivers, caves and settlements from there. Although the dynamic resolution of a triangle mesh should lend itself well to such a generation approach, I might come to a point in the future where I need to split the system into multiple generators for different scales (e.g. erosion at the scale of a continent or mountain range vs. the scale of a local river). But that should also mesh quite well with the triangle mesh approach, as the small-scale-generator could use the vertices from the high-level generator, refine it further and generate new information matching the constraints determined by the existing vertices. There will also be many interesting problems there, like the usual problem with discontinuities at the border between cells, of course. But that is far enough in the future that I probably shouldn’t concern myself with it, just now.</p>

<h2 id="reusability">Reusability</h2>

<p>And my final aim for this project stems from my inkling that I might have bitten off more than I can chew here. Because of that I want to structure the project in a fashion that even in its incomplete state, parts of it should be interesting or usable for others. To achieve that I’ve not just <a href="https://gitlab.com/proc_world_gen">open sources (most) of the project</a> but also plan to structure it as modular as possible. I already laid the foundation for this with a basic C-API for the world-model and generation passes. Based on this I plan to develop a simple graphical editor as a debugging tool, as well as the procedural generation passes as self-contained reusable components. So others should (at least in theory) be able to modify/steal any interesting parts, extend the system with new functionality or use it as a starting point for their own projects.</p>

:ET