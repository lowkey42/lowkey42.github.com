I"Æi<div class="column_text">

  <p>Iâ€™m currently looking into possible topics for my master thesis. But against all odds Iâ€™ve grown a bit tired of writing game engines and renderers, lately. So, seeing as Iâ€™ve also developed an interest in procedural generation and always had a bit of a fascination for fantasy worlds and maps, Iâ€™ve decided to work on procedural world generation. This is obviously going to be a <a href="https://dwarffortresswiki.org/index.php?title=DF2014:Fun&amp;redirect=no">fun</a> project with much potentiel for interesting failures. But as Gordon Moore put it: If everything you try works, you arenâ€™t trying hard enough. Therefore Iâ€™m planing to force my self to document my plans, progress and interesting problems here (even if primarily for myself).</p>

  <p>So without further ado: Welcome to this unwise mix of <a href="https://heredragonsabound.blogspot.com/2020/02/the-forever-project.html">forever project</a> and master thesis.</p>

</div>

<!--more-->

<!--
As always the first step, when starting a project in a new field is research. There are of course far too many projects and papers about this topic than I could survey in a reasonable timeframe. It's more about getting a general idea about the state-of-the-art and other peoples solutions to common problems. So let's dive right in:

[![Dwarf Fortress Screenshot][dwarf_fortress]][dwarf_fortress] **Dwarf Fortress** is probably the first thing that comes to mind, when people think about procedural generation of game worlds. Sadly it's a closed source project, so details about the generation process and algorithms are a bit sparse.

fractal terrain + simulation
https://web.archive.org/web/20180216190716/http://aigamedev.com/open/teaser/living-worlds-dwarf-fortress/

limited/complex control: 



# TODO: ausformulieren
- Dwarf Fortress: [![Dwarf Fortress Screenshot][dwarf_fortress]][dwarf_fortress]
   <span style="color:blue">gold standard, but closed-source and hard to find details [https://www.gamasutra.com/view/news/343859/]; large but quite corse; many options for user control (but a bit hackish [some parameters for random generation, fixing and rejection] => hart to control); history generation most impressive => future reference; Most impressive: generation of civilizations complete with languages => beyond my scope; terrain generation produces servicable results but uses a phenomenological model without a solid grounding in the actual physical processes => noisey look, many unrealistic features; but many good ideas to patch over the initial noise with simulations (river generation, erosion, precipitation, temperatures, ...)</span>
- <a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/">Amit Patel's article "Polygonal Map Generation for Games"</a>: [![Mapgen2 Screenshot][mapgen2]][mapgen2]
  <span style="color:blue">really only touches on the basic datastructure and algorithms; visially pleasing results with not that many polygons; based on Voronoi polygons and their dual (Delaunay triangulation) but also works with a simple perturbed grid; irregular grid mask many artefacts found in traditional uniform grids; graph datastructure still allows simple traversal and modification (if not as simple as a uniform grid); most importantly an unstructured grid allows for variable resolution based on actually needed details => essantial for large worlds; generation itself is heavly based on artistic input with only some procedural generation (simple river flows); great basis for further expantion (as already done by many others) </span>
  [![Mapgen4 Screenshot][mapgen4]][mapgen4]
  <span style="color:blue"> <a href="https://www.redblobgames.com/maps/mapgen4/">New iteration mapgen4</a> ; uses a distance field for terrain rendering (nice results with minimal work compared to Dragons Abound => note for future); </span>
  <span style="color:blue"><a href="http://www-cs-students.stanford.edu/~amitp/simblob/economy.html">See also</a> Notes about <a href="http://www-cs-students.stanford.edu/~amitp/games.html">SimBlob</a> a relativly old simulation-heavy strategy game project; Notes include: mostly interesting like-/idea-dump about simulation of erosion, weather, city simulation
- <a href="https://heredragonsabound.blogspot.com">Scott Turner's Dragons Abound</a>: [![Dragons Abound Screenshot][dragons_abound]][dragons_abound]
  <span style="color:blue"> long running project focused more on map generation and rendering but also heavily relise on simulation for generation of (semi) realistic weather patterns and rivers; but basic terrain mostly relies on noise like in classical terrain generation; data structure also based on Amit Patel's polygonal approach; breathtaking results; also has done extensive work in name generation (=> future reference); but generator still has some problems generating realist terrains (espatialy at world/continent scale) caused by its reliance on noise for the terrain shape </span>
- <a href="https://azgaar.wordpress.com">Azgaar's Fantasy Map Generator</a>:
   <span style="color:blue">also based on voronoi cells; JS/Browser-Based; realy interactive editor (TAKE NOTES!); generation influenced by Dragons Abound; heavily noise based generation; (Blog is Dead? last Update 2018); focus seems to be culture simulation/generation; LOOK CLOSER AT CODE => GitHub:Â https://github.com/Azgaar/Fantasy-Map-GeneratorÂ ;Â </span>
- <a href="undiscoveredworlds.blogspot.com">Undiscovered Worlds</a>: [![Undiscovered Worlds Screenshot][uw]][uw]
generates maps but focuses more on world-gen than estetics; inspired by Dragons Abound; coarse world-map as basis for on-demand regional maps; similar goals to my project; pixel-based; flat worlds (instead of sphere) wrapping east-west; no simulation of tectonic-plates but realistic looking fake based on pasting template-shapes; seems a bit too simplyfied and uses quite a bit too much randomness and fractals for my taste;
[![Undiscovered Worlds River Deltas][uw_deltas]][uw_deltas]
impressivly realistic looking map, especially river deltas and wetlands
- forhinhexes.blogspot.com: TODO 
  <span style="color:blue">shockingly deep basis in theory; uses a coars ridgid hex-grid instead of a more natural irregular grid; focuses more on settlement/civilataion simulation than terrain; STILL NEED TO READ MOST OF THE POSTS... </span>
- Difclone by leatherbee.org: TODO 
  <span style="color:blue">simulation based on actual physical theory: tectonic plates, rivers and weather patterns; unfinished (changed focus to gameplay instead of PCG) => only roughe outline, e.g. no plate movement (yet); also uses voroini cells but only for plates and rasterizes them into a uniform grid for further steps; theoretical basis should be a usefull starting pointÂ  (espetially for plate tectonics)</span>
- <a href="https://github.com/Mindwerks/worldengine">WorldEngine</a>: TODO [simulation-heavy, python-based, last update 2018, uniform-grid, relies on noise?]
- <a href="http://roberthodgin.com/project/meander">Meander</a>


# TODO: papers?
- Procedural Tectonic Planets: simplified model to simulate tectonic plates on a sphere; simulates subduction, collision, oceanic-crust generation and plate rifting + an extremly simplified erosion model (good enough because of low resolution and large time-steps); similar to what I've been planing; high-level simulation + generation of details afterwards; describes movement as angle+axis rotation; prety detailed, should be a valueable resource for my implementation; Amplification (for details): (1) procedural, based on 3D Gabor noise, for oceanic relief and (2) exemplar-based by blending primitives

- Large Scale Terrain Generation from Tectonic Uplift and Fluvial Erosion: models tectonic uplift and erosion based on a simplified graph-based model; relatively small-scale but the model should be usable at larger scales too


- Integrating procedural generation and manual editing of virtual worlds: tries to provide detailied manuell editing options integrated with procedural generation; relativly local area; interesting ideas but main focus on details like cities and streats, that are not yet relevant for me
- Generation of Folded Terrains from Simple Vector Maps: interesting read; kindof the reverse of my current plan: generating detailed terrain from rough scetch (vector-map of mountaintops, coasts and rivers); simulation part might be too simplified for my usecase; generation of plausible fault-lines from mountaintops could be interesting for an editor (much later); generates Sub-Plates based on voronoi cells around peaks that are then merged into larger plates

- A Proposal for a Procedural Terrain Modelling Framework: very abstract, concept of indipendent layers is interesting but also not realy novel
- TODO!: Procedural Generation of Volumetric Data for Terrain
- TODO: PROCEDURAL PLANETS INTO DETAIL
- TODO: Semantic Content Generation Framework for Game Worlds
- TODO: A Survey on the Procedural Generation of Virtual Worlds
- TODO: Sculpting Mountains: Interactive Terrain
- TODO: Drainage Queries in TINs
- TODO: Terrain Amplification with Implicit 3D Features [[https://github.com/aparis69/Implicit-Volumetric-Terrains]]

- Procedural Heightmap Generation Using Plate Tectonics (BA Thesis by Lauri Viitanen): TODO simulated plate tectonics; impressive results; missing hotspots; some missing details (especially in ocean) due to simplifications; models plates as individual tilemaps (uniform grids) that are moved around; my model (non-uniform grid / mesh) seems to be more promissing (less complexity, fewer grid-artefacts, detail only where needed) but could be problematic if it doesn't privide enough detail when needed. Quote: 

  ```A far more flexible and intuitive approach would be to use three dimensional polygon mesh or point-sample based model like done in [31]. Such an approach would allow the modeling of a plate as a group of individual pieces of crust whose position relative to the other pieces in the plate is not fixed.  This would enable a far more physically accurate simulation of the strains and stresses that plates cause in each other.```


# TODO: Existing projects
-->

<h1 id="related-work">Related Work</h1>

<p>There already are quite a lot of inspiering projects that procedurally generate worlds and maps with quite impressive results. And also some scientific papers that I might use as a basis for my project. Also most of these are sadly closed source projects.</p>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/dwarf-fortress.png" alt="Dwarf Fortress is arguably the first thing that comes to mind, when people think about procedural generation of game worlds. Sadly concrete informations about the generation algorithms is a bit sparse. But the generation starts with layers of noise based fractal maps for terrain/percipitation/..., that form the initial map and are then refined by simulation steps. The main focus and most impressive part is of course the history generation and simulation of the actual game world. In contrast, the terrain generation is sadly relativly unimpressive." />
  <figcaption>Dwarf Fortress is arguably the first thing that comes to mind, when people think about procedural generation of game worlds. Sadly concrete informations about the generation algorithms is a bit sparse. But the generation starts with layers of noise based fractal maps for terrain/percipitation/..., that form the initial map and are then refined by simulation steps. The main focus and most impressive part is of course the history generation and simulation of the actual game world. In contrast, the terrain generation is sadly relativly unimpressive.</figcaption>
</figure>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/red_blob_mapgen4.png" alt="&lt;a href='https://www.redblobgames.com/maps/mapgen4/'&gt;Amit Patel's Mapgen 4&lt;/a&gt; (as well as its &lt;a href='https://www.redblobgames.com/maps/mapgen2/'&gt;previous iterations&lt;/a&gt;) is also quite interesting. Especially because it's quite &lt;a href='http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/'&gt;thoroughly&lt;/a&gt; &lt;a href='https://simblob.blogspot.com/search/label/mapgen4'&gt;documented&lt;/a&gt; on his blog. It uses a relaxed voronoi diagram and its dual (delauny triangulation) as its fundamental datastructure to generate interesting maps without the obvious artefacts often seen with uniform grids. Mapgen4 allows for quite intuitive editing of the elevation and generation parameters, with procedural generation of rivers, percipitation and bioms. But the most interesting part for me personally is the rendering which utilizes a traditional rendering pipeline with an oblique projection and more artistic lighting to achieve a look that is quite close to a hand-drawn look." />
  <figcaption><a href="https://www.redblobgames.com/maps/mapgen4/">Amit Patel's Mapgen 4</a> (as well as its <a href="https://www.redblobgames.com/maps/mapgen2/">previous iterations</a>) is also quite interesting. Especially because it's quite <a href="http://www-cs-students.stanford.edu/~amitp/game-programming/polygon-map-generation/">thoroughly</a> <a href="https://simblob.blogspot.com/search/label/mapgen4">documented</a> on his blog. It uses a relaxed voronoi diagram and its dual (delauny triangulation) as its fundamental datastructure to generate interesting maps without the obvious artefacts often seen with uniform grids. Mapgen4 allows for quite intuitive editing of the elevation and generation parameters, with procedural generation of rivers, percipitation and bioms. But the most interesting part for me personally is the rendering which utilizes a traditional rendering pipeline with an oblique projection and more artistic lighting to achieve a look that is quite close to a hand-drawn look.</figcaption>
</figure>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/dragons_abound.png" alt="&lt;a href='https://heredragonsabound.blogspot.com'&gt;Scott Turner's Dragons Abound&lt;/a&gt; procedural generates and draws fantasy maps, with quite buitiful and adaptable results that are already ofter near-indistinguisheable from hand drawn maps. Also the main focus seems to be on drawing the maps, which informed some of the design decisions, there are also some simulation-based aproches to determine climates, percipitation and rivers. There are some technical similarities to Amit Patel's approach, insofar as both use delauny triangulations as their fundamental datastructure. But Dragons Abound seems to use a much larger amount of vertices, which support smaller features and produces more natural shapes." />
  <figcaption><a href="https://heredragonsabound.blogspot.com">Scott Turner's Dragons Abound</a> procedural generates and draws fantasy maps, with quite buitiful and adaptable results that are already ofter near-indistinguisheable from hand drawn maps. Also the main focus seems to be on drawing the maps, which informed some of the design decisions, there are also some simulation-based aproches to determine climates, percipitation and rivers. There are some technical similarities to Amit Patel's approach, insofar as both use delauny triangulations as their fundamental datastructure. But Dragons Abound seems to use a much larger amount of vertices, which support smaller features and produces more natural shapes.</figcaption>
</figure>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/azgaar.png" alt="&lt;a href='https://azgaar.github.io/Fantasy-Map-Generator/'&gt;Azgaar's Fantasy Map Generator&lt;/a&gt; is another extremly interesting project, that not only provides a working web application to interactivly generate detailed fantasy maps but is also &lt;a href='https://github.com/Azgaar/Fantasy-Map-Generator'&gt;open source&lt;/a&gt;. And there is even a (currently sadly inactive) &lt;a href='https://azgaar.wordpress.com'&gt;blog&lt;/a&gt; with interesting details about its design and inner workings. As in the previous two, this generator uses a voronoi graph but the focus seems to lie much more on the generation. But the most impressive part of this project is probably the insane amount of possible customization and editing of the generated maps." />
  <figcaption><a href="https://azgaar.github.io/Fantasy-Map-Generator/">Azgaar's Fantasy Map Generator</a> is another extremly interesting project, that not only provides a working web application to interactivly generate detailed fantasy maps but is also <a href="https://github.com/Azgaar/Fantasy-Map-Generator">open source</a>. And there is even a (currently sadly inactive) <a href="https://azgaar.wordpress.com">blog</a> with interesting details about its design and inner workings. As in the previous two, this generator uses a voronoi graph but the focus seems to lie much more on the generation. But the most impressive part of this project is probably the insane amount of possible customization and editing of the generated maps.</figcaption>
</figure>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/undiscoveredworlds.png" alt="&lt;a href='https://undiscoveredworlds.blogspot.com'&gt;JonathanCR's Undiscovered Worlds&lt;/a&gt; as a procedural world generation project, inspired by Dragons Abound. But the aim of this project is more to generate complete worlds instead of drawing maps with relativly small/local scale, which is especially interesting as its close to my current plans." />
  <figcaption><a href="https://undiscoveredworlds.blogspot.com">JonathanCR's Undiscovered Worlds</a> as a procedural world generation project, inspired by Dragons Abound. But the aim of this project is more to generate complete worlds instead of drawing maps with relativly small/local scale, which is especially interesting as its close to my current plans.</figcaption>
</figure>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/Procedural Tectonic Planets.gif" alt="&lt;a href='https://hal.archives-ouvertes.fr/hal-02136820/file/2019-Procedural-Tectonic-Planets.pdf'&gt;Procedural Tectonic Planets by Cortial et al.&lt;/a&gt; is a paper from 2019 that proposes a modell to procedurally generate planets using a simplified simulation of plate tectonics. Also the authors sadly didn't proivide their source code or an executeable to reproduce their results, the provided images and &lt;a href='https://www.youtube.com/watch?v=GJQVl6Xld0w'&gt;video&lt;/a&gt; look quite promising." />
  <figcaption><a href="https://hal.archives-ouvertes.fr/hal-02136820/file/2019-Procedural-Tectonic-Planets.pdf">Procedural Tectonic Planets by Cortial et al.</a> is a paper from 2019 that proposes a modell to procedurally generate planets using a simplified simulation of plate tectonics. Also the authors sadly didn't proivide their source code or an executeable to reproduce their results, the provided images and <a href="https://www.youtube.com/watch?v=GJQVl6Xld0w">video</a> look quite promising.</figcaption>
</figure>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/Large Scale Terrain Generation from Tectonic Uplift and Fluvial Erosion.png" alt="&lt;a href='https://hal.inria.fr/hal-01262376/document'&gt;Large Scale Terrain Generation from Tectonic Uplift and Fluvial Erosion by Cordonnier et al.&lt;/a&gt; is paper from 2017 that uses tectonic uplift and hydraulic erosion data to generate plausible terrains. Also the scale is more local than my current plans, this might be an interesting approch to simulate erosion and river formation at a relativly high level." />
  <figcaption><a href="https://hal.inria.fr/hal-01262376/document">Large Scale Terrain Generation from Tectonic Uplift and Fluvial Erosion by Cordonnier et al.</a> is paper from 2017 that uses tectonic uplift and hydraulic erosion data to generate plausible terrains. Also the scale is more local than my current plans, this might be an interesting approch to simulate erosion and river formation at a relativly high level.</figcaption>
</figure>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/wonderdraft.jpg" alt="&lt;a href='https://www.wonderdraft.net'&gt;Wonderdraft&lt;/a&gt; is a quite powerfull and easy to used editor to manually create fantasy maps. It doesn't realy provide much in terms of procedural generation but might be an interesting reference as far as user editing of the generated data is concerned. There might also be an interesting potential in integrating a more powerfull procedural generation toolkit with it, but in the absence of any API or documented file format that seems to be unrealistic for now." />
  <figcaption><a href="https://www.wonderdraft.net">Wonderdraft</a> is a quite powerfull and easy to used editor to manually create fantasy maps. It doesn't realy provide much in terms of procedural generation but might be an interesting reference as far as user editing of the generated data is concerned. There might also be an interesting potential in integrating a more powerfull procedural generation toolkit with it, but in the absence of any API or documented file format that seems to be unrealistic for now.</figcaption>
</figure>

<figure class="image">
  <img style="float:none; max-height:20em" src="/assets/images/voxel_farm.gif" alt="&lt;a href='https://www.voxelfarm.com/index.html'&gt;Miguel Cepero's Voxel Farm&lt;/a&gt; is another interesting interesting project and his &lt;a href='http://procworld.blogspot.com'&gt;blog&lt;/a&gt; is one of the reasons I originaly became interest in 3D graphics and procedural generation. In contrast to most projects in this list it generates not just a map of a world but an actual interactive 3D world. This is obviously far outside of any reasonable scope for me, but some of the more abstract ideas might still be interesting." />
  <figcaption><a href="https://www.voxelfarm.com/index.html">Miguel Cepero's Voxel Farm</a> is another interesting interesting project and his <a href="http://procworld.blogspot.com">blog</a> is one of the reasons I originaly became interest in 3D graphics and procedural generation. In contrast to most projects in this list it generates not just a map of a world but an actual interactive 3D world. This is obviously far outside of any reasonable scope for me, but some of the more abstract ideas might still be interesting.</figcaption>
</figure>

<h1 id="project-aims">Project Aims</h1>

<p>So what exactly is it Iâ€™m trying to achieve here? My main focus is going to be not to different from that of Undiscovered Worlds. Iâ€™m mostly interested in generating plausible worlds that can be explored, used and processed further by others. Of course, Iâ€™ll also have to visualize my results in the form of maps and provide some form of user input but that probably wonâ€™t be anything to fancy. And beside that I have three main aims for this project to guide my design decisions.</p>

<h2 id="simulation-instade-of-noise">Simulation instade of Noise</h2>
<p>As Iâ€™m mostly interested in the world generation aspect I want to try to reduce the amount of random input and noise to a minimum and rely on simulations instead. A model based on a large amount of complexly layered noise might generate interesting worlds but that is entirely thanks to how that noise is modulated instead of any real meaningfull capabilities of the system. And as an effect of this, the generational space of such models is inherently limited to the small subset for which the parameters have been hand-tuned. As John von Neumann famously said:</p>
<blockquote>
  <p>With four parameters I can fit an elephant, and with five I can make him wiggle his trunk.</p>
</blockquote>

<p>But my goal is to create a more generalized system that can generate a wide variaty of interesting worlds. What I mean with <em>interesting</em> in this case is, that there should be a <em>comprehensible</em> amount of <em>meaningfull</em> information in the generated worlds. So every visible feature should have a <em>cause</em> that can be discovered by the user, e.g. matching coasts where continents split apart, canyons where rivers used to flow, settlements where they actually make sense with names based on their suroundings and history. Aside from the generell technical dificulty, stricing the right balance will also be a problem here. Because an unbroken chain of cause and effect is utterly meaningless if itâ€™s to complex to be easily comprehensible and the generated world becomes no more interesting than one based purely on random noise.</p>

<h2 id="realistic-scale">Realistic scale</h2>

<p>My second large aim for this project is the scale at which I want to generate worlds. To support physically meaningfull parameters and allow for an easier comparison with the real world Iâ€™m planing to generate spherical worlds on roughly the same scale as earth, i.e. a radius of about 6.000 km.</p>

<p>To support such a large scale with any amount of local details Iâ€™m going to use a triangle mesh to store my elevation and other information. This should allow for a wide variaty of resolutions based on local requirements (i.a. fewer vertices in the ocean and more near coasts and mountains). And this should also solve most of the problems and artefacts, encountered when one tries to use uniform rectangular grids like bitmaps and a spherical surface.</p>

<p>Iâ€™m currently planing to develop my generator in a top-down fashion, starting with the largest terrain features like tectonic plates and mountains and moving on to smaller scale details like rivers, caves and settlements from there. Also the dynamic resolution of a triangle mesh should lend itself well to such a generation approach, I might come to a point in the future where I need to split the system into multiple generators for different scales (e.g. erosion at the scale of a continent or mountain range vs. the scale of a local river). But that should also mesh quite well with the triangle mesh approach, as the small-scale-generator could use the vertices from the high-level generator, refine it further and generate new information matching the constraints determined by the existing vertices. There will also be many interesting problems there, like the usual problem with discontinouities at the border between cells, of course. But that is far enough in the future that I probably shouldnâ€™t concern myself with it, just now.</p>

<h2 id="reuseability">Reuseability</h2>
<ul>
  <li>Easy to use (editor): combine multiple simpler passes, meaningfull parameters, draw directly onto map to create/remove mountains/oceans/â€¦</li>
  <li>Easy to extend: Simulation-Steps can be loaded as plugins, so others can extend/modify the process; Generation-API can be used outside of the editor (e.g. in games, web-services, â€¦)</li>
</ul>

:ET